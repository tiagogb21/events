// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ORGANIZER
}

enum Status {
  UPCOMING
  LIVE
  COMPLETED
}

model User {
  id            String        @id @default(uuid())
  name          String
  email         String        @unique
  password_hash String
  role          Role
  events        Event[]       @relation("OrganizerEvents")
  participant   Participant[]
  chats         Chat[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Event {
  id           String        @id @default(uuid())
  title        String
  description  String
  date         DateTime
  organizer    User          @relation(fields: [organizerId], references: [id], name: "OrganizerEvents")
  organizerId  String
  participants Participant[]
  chat         Chat[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("events")
}

model Participant {
  id      String @id @default(uuid())
  event   Event  @relation(fields: [eventId], references: [id])
  eventId String
  user    User   @relation(fields: [userId], references: [id])
  userId  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("participants")
}

model Chat {
  id      String @id @default(uuid())
  message String
  event   Event  @relation(fields: [eventId], references: [id])
  eventId String
  user    User   @relation(fields: [userId], references: [id])
  userId  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("chats")
}
